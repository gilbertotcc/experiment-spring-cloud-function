plugins {
  id 'org.springframework.boot' version '2.6.6'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'jacoco'
  id 'checkstyle'
  id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group = 'it.tccr.experiment'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
  mavenCentral()
}

ext.versions = [
  checkstyleVersion          : "8.39",
  awsLambdaJavaEventsVersion : "3.11.0",
  awsLambdaJavaCoreVersion   : "1.2.1"
]

ext {
  set('springCloudVersion', "2021.0.1")
}

dependencies {
  implementation 'org.springframework.cloud:spring-cloud-starter-function-web'
  implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'
  implementation "com.amazonaws:aws-lambda-java-events:${versions.awsLambdaJavaEventsVersion}"
  implementation "com.amazonaws:aws-lambda-java-core:${versions.awsLambdaJavaCoreVersion}"
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

assemble.dependsOn = [shadowJar]

jar {
  manifest {
    attributes 'Main-Class': 'it.tccr.experiment.awslambdatest.FunctionConfiguration'
  }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
  classifier = 'aws'
  dependencies {
    exclude(
      dependency("org.springframework.cloud:spring-cloud-function-web"))
  }
  // Required for Spring
  mergeServiceFiles()
  append 'META-INF/spring.handlers'
  append 'META-INF/spring.schemas'
  append 'META-INF/spring.tooling'
  transform(PropertiesFileTransformer) {
    paths = ['META-INF/spring.factories']
    mergeStrategy = "append"
  }
}

test {
  useJUnitPlatform()
  jacoco {
    destinationFile = file("$buildDir/jacoco/${name}.exec")
  }
  testLogging {
    events "failed"
    exceptionFormat "full"
    showStandardStreams = true
  }
}

jacoco {
  toolVersion = '0.8.7'
}

tasks.withType(Test) {
  finalizedBy jacocoTestReport
}

ext {
  jacocoMergedReport = file("$buildDir/jacoco/mergeTest.exec")
}

task jacocoMergeTestReport(type: JacocoMerge) {
  executionData tasks.withType(Test)
  destinationFile = jacocoMergedReport
}

jacocoTestReport {
  dependsOn jacocoMergeTestReport
  executionData jacocoMergedReport
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it)
    }))
  }
}

// CHECKSTYLE
checkstyle {
  toolVersion = "${versions.checkstyleVersion}"
}
checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"
